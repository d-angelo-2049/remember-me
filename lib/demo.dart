import 'dart:convert';
import 'dart:typed_data';

import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_functions/cloud_functions.dart';
import 'package:flutter/cupertino.dart';
import 'package:intl/date_symbol_data_local.dart';
import 'domain/value/status.dart';
import 'firebase_options.dart';
import 'package:intl/intl.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );
  // FirebaseFunctions.instance.useFunctionsEmulator('localhost', 5001);
  readFood();
}

Future<void> createFood() async {
  initializeDateFormatting("ja_JP");
  String formattedDate =
      DateFormat('yyyy/MM/dd(E) HH:mm', "ja_JP").format(DateTime.now());
  HttpsCallable callable = FirebaseFunctions.instanceFor(region: 'us-central1')
      .httpsCallable('postFood');

  final resp = await callable.call(<String, dynamic>{
    'name': '昨日のスープ',
    'expiration': formattedDate,
    'location': '冷蔵庫',
    'imageString':
        'iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAMAAABrrFhUAAAABGdBTUEAALGPC/xhBQAAAAFzUkdCAK7OHOkAAAMAUExURQAAAL+7yN3b483M1L+8yLOvu9bV3LKuvLGsu7Gsu4N8i8PByY6Fmo2EmcbAz8/K1ru3w8C7ypWQna2otZCLlp6ZqJCMls3I1qWfsJGKm5GLm7Ktu765x8nG0c7J16eisLm1wc7J1s/K14d8lamksc7J1q6puM7J1ZOPmY5+pqWgr6umts7J2I59ppeTns/K1oh8mo+LlIR7jsbCzLSwvb64x7qzxZ5yY/+CRP+HRf+FRP+ERP+BRP+JRczF1Y9+p8zG1tDL2NHP2P+GRM7J14h6nM3H1ox8o419pYl6npF/rP6AQ4Z5l763yJKArYd5msC7yYt8oYp7n6Scs8nGz/+KRamdu5WDr4V7kaOWuM/K17atwrixxMbCzcS+y/6EQ/6GRYV6lGO+a/6DQ2S/bIxTPbOqwp6Pta6kv7GnwKygvZB/qqCStpuMs5eGsaaZuoR7jnxrmX9wmItQOIyHlJJXP6CXr4xNNLqzxry1x5qJsphaQfNlNv19QYN8jZmUocmBZ+xxPcZ7YL6+xJKMmvl0PP/cRf/kTJ5dRP/WPctWNKVhR+NoOvV5QI+MlaOeq5uSrOdtPN5kOfx+Qvh8QfZuOtpCKsNQMfF1P7i4v9hfN9JbNfuDQ5WQnf6IRP/rU1anTb52XWK7Z4+DoupCLa+qt75DKMpBJ2C4Y52XplyxWtGGa7tqSPrMOcRtSMrB0auns/t5P161X5OIplisVaxlS86psfBcMrVvVJ53hZeMqbxvVK9pTvNNOqF9jviCRMWgrfjCPPG7NNmztaiJoaOBla6QpaWEm8R0VLmXqYiAletWMKejr9eMcoxLMZiQpU2ZQeOjjuqvMPZbTPKUadbCyVKgSeK7unvRYrZUONC3wOWJRu6efOKwpfqOVnC+Up9xeY1JLnbHWqVRM8mXlv+DRPloXPOGVb+tvNp0Rel8RNKBZGqwTbWcrJZOM7R+gv2SQ7qltH7ban+uXJ6jVZmWRqllYvx2bKusV+WBXMeIgXGdSPunQMWQSuucMsmAQKSUJwUAAADNdFJOUwAh/v0N/v0DBxb+/FwzMfDzQPLw8+3cl7B1i9BV53fG4dey096Fb1/Nu5yLp+ayyJuoubh8zJLh//////////////7///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7TNqSEAAAfSElEQVR42u2dCXgUVbbHO5KQNGQh7Alhl10WlzdfNnrCltHXZAyLjJKlWxrBbZxRIhAFEQ2iQNg6EYROZBEEQUJkWBVaDKAiAsEghgDiSCaAgiDgU8HxnXPvrapbXVXdlQDpDvY//X1GTdL1/9U55y51722DwS+//PLLL7/88ssvv/zyyy+//PLLL7/88ssvv/zyyy+//PLLL7/88ssvv/zyyy+//PLrBiowvEubFh16t4+IGNmv38iIiPa9O7Ro0yU88A/hPaZNh9b9NNS6Q6eYW5lCcGSn3iP7edDI3p0ig29F9yExd0T006mIO2JCbjH74S10u2cMWoTfQnnfpX2/Gqh9l1sjDIydIvrVUBGdjH9k+7cCgkB1+yOLUk+fvnju3J49u1B79pw7d/F0StFIdQR1uGHs0lrFe8rpc5/uIdpF/e/6GF5Eey6eVqEQ0aWuVv7erlZMmac/Re2RA0AEHwvade60yfX3etfFFiGk00AX90cvfkrt45dLCAgEdn+8G7THlcHATnWuQQiXt3wjM09/+KkgV/+7pPsvINh9LkWeC+3rWBC0kd3+5KMfgj4VEew59evnn/9SVeV02GJjbU5n1S+/fLfm1x8k+6hdp5NlQdCmLrV9HUZykts/Bc5tlUyxclX9suYHEcCOHR9fNPF/p4Ox7oS/in0kcOrzKkelXC4IYhMdEoQdO3ZfTOb+VF1Jg5gI6ZoHHt30IRW6T0ioVEqBIDGxijDYgdp9eqD01yJi6kT6c/esSLBP3FN5RJCIqnoRzBMEuzK5P+j7hSC4BR/9myiAU2XWBE76EDi++2EH1TkuD1r4+FxB8B387Qf/QKC0KkEhPQQSzb8wBB+nSn/1Dp8mEMKVf7j9SEDNvmcEiS4ILkqVoIMP94mCJf8m6v9UVTyoBggEAnlnEMHWHbuKJALBdSD+i4j9TWXxA+Kp9CBQTYO8hS9tRQS7U30/C8T6N/AwsV9qjefl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',
    'status': Status.unconsume.value
  });

  print("result: ${resp.data}");
}

Future<void> readFood() async {
  HttpsCallable callable = FirebaseFunctions.instanceFor(region: 'us-central1')
      .httpsCallable('readFood');
  final resp = await callable
      .call(<String, dynamic>{'documentId': 'J1g7EeC6lRsasCwXQiBZ'});

  print("${resp.data}");
  Map<dynamic, dynamic> data = resp.data['data'];
  String imageString = data['imageString'];

  Uint8List uint8Image = base64Decode(imageString);
  ImageProvider<MemoryImage> imageProvider = MemoryImage(uint8Image);
}

Future<void> dangerList() async {
  HttpsCallable callable = FirebaseFunctions.instanceFor(region: 'us-central1')
      .httpsCallable('dangerList');
  final resp = await callable.call();
  print(resp.data);
}
